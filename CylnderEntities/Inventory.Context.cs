//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CylnderEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IndoGhanaEntities : DbContext
    {
        public IndoGhanaEntities()
            : base("name=IndoGhanaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_tblStatusMasterGetByType_Result> usp_tblStatusMasterGetByType(Nullable<int> statusTypeID)
        {
            var statusTypeIDParameter = statusTypeID.HasValue ?
                new ObjectParameter("StatusTypeID", statusTypeID) :
                new ObjectParameter("StatusTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblStatusMasterGetByType_Result>("usp_tblStatusMasterGetByType", statusTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_CustomerMasterGet_Result> usp_CustomerMasterGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerMasterGet_Result>("usp_CustomerMasterGet");
        }
    
        public virtual ObjectResult<usp_CustomerMasterGetbyID_Result> usp_CustomerMasterGetbyID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerMasterGetbyID_Result>("usp_CustomerMasterGetbyID", customerIDParameter);
        }
    
        public virtual ObjectResult<string> usp_CustomerMasterInsertUpdate(Nullable<int> customerID, string customerName, string customerAddress, string contactPersonName, string contactNumber, Nullable<int> branchID, Nullable<int> companyID, Nullable<System.DateTime> creationDate, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<System.DateTime> updatedOn, Nullable<bool> status)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_CustomerMasterInsertUpdate", customerIDParameter, customerNameParameter, customerAddressParameter, contactPersonNameParameter, contactNumberParameter, branchIDParameter, companyIDParameter, creationDateParameter, createdByParameter, updateByParameter, updatedOnParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_CustomerSiteMasterGetbyID_Result> usp_CustomerSiteMasterGetbyID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerSiteMasterGetbyID_Result>("usp_CustomerSiteMasterGetbyID", customerIDParameter);
        }
    
        public virtual ObjectResult<string> usp_CylinderMasterInsertUpdateMobile(string cylindeNumber, string barcode, Nullable<int> presentState, Nullable<int> gasInUse, Nullable<int> owner, Nullable<double> size, Nullable<int> sizeUOMID, Nullable<int> currentLocation, Nullable<int> currentCustomerBranchID, Nullable<int> branchid, Nullable<int> companyID, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<bool> status)
        {
            var cylindeNumberParameter = cylindeNumber != null ?
                new ObjectParameter("CylindeNumber", cylindeNumber) :
                new ObjectParameter("CylindeNumber", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var presentStateParameter = presentState.HasValue ?
                new ObjectParameter("PresentState", presentState) :
                new ObjectParameter("PresentState", typeof(int));
    
            var gasInUseParameter = gasInUse.HasValue ?
                new ObjectParameter("GasInUse", gasInUse) :
                new ObjectParameter("GasInUse", typeof(int));
    
            var ownerParameter = owner.HasValue ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(double));
    
            var sizeUOMIDParameter = sizeUOMID.HasValue ?
                new ObjectParameter("SizeUOMID", sizeUOMID) :
                new ObjectParameter("SizeUOMID", typeof(int));
    
            var currentLocationParameter = currentLocation.HasValue ?
                new ObjectParameter("CurrentLocation", currentLocation) :
                new ObjectParameter("CurrentLocation", typeof(int));
    
            var currentCustomerBranchIDParameter = currentCustomerBranchID.HasValue ?
                new ObjectParameter("CurrentCustomerBranchID", currentCustomerBranchID) :
                new ObjectParameter("CurrentCustomerBranchID", typeof(int));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_CylinderMasterInsertUpdateMobile", cylindeNumberParameter, barcodeParameter, presentStateParameter, gasInUseParameter, ownerParameter, sizeParameter, sizeUOMIDParameter, currentLocationParameter, currentCustomerBranchIDParameter, branchidParameter, companyIDParameter, createdByParameter, updateByParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_ManufacturerMasterGet_Result> usp_ManufacturerMasterGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ManufacturerMasterGet_Result>("usp_ManufacturerMasterGet");
        }
    
        public virtual ObjectResult<usp_ManufacturerMasterGetByID_Result> usp_ManufacturerMasterGetByID(Nullable<int> manufacturerID)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ManufacturerMasterGetByID_Result>("usp_ManufacturerMasterGetByID", manufacturerIDParameter);
        }
    
        public virtual ObjectResult<string> usp_ManufacturerMasterInsertUpdate(Nullable<int> manufacturerID, string manufacturerName, string manufacturerAddress, string contactPersonName, string contactNumber, string email, Nullable<System.DateTime> creationDate, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<bool> status)
        {
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var manufacturerAddressParameter = manufacturerAddress != null ?
                new ObjectParameter("ManufacturerAddress", manufacturerAddress) :
                new ObjectParameter("ManufacturerAddress", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_ManufacturerMasterInsertUpdate", manufacturerIDParameter, manufacturerNameParameter, manufacturerAddressParameter, contactPersonNameParameter, contactNumberParameter, emailParameter, creationDateParameter, createdByParameter, updateByParameter, statusParameter);
        }
    
        public virtual ObjectResult<string> usp_VehicleMasterAddUpdate(Nullable<int> vehicleID, string vehicleNumber, Nullable<int> companyID, Nullable<int> branchID, Nullable<System.DateTime> creationDate, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<System.DateTime> updatedOn, Nullable<bool> status)
        {
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("VehicleNumber", vehicleNumber) :
                new ObjectParameter("VehicleNumber", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_VehicleMasterAddUpdate", vehicleIDParameter, vehicleNumberParameter, companyIDParameter, branchIDParameter, creationDateParameter, createdByParameter, updateByParameter, updatedOnParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_VehicleMasterGet_Result> usp_VehicleMasterGet(Nullable<int> companyID, Nullable<int> branchID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VehicleMasterGet_Result>("usp_VehicleMasterGet", companyIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<usp_VehicleMasterGetByID_Result> usp_VehicleMasterGetByID(Nullable<int> companyID, Nullable<int> branchID, Nullable<int> vehicleID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VehicleMasterGetByID_Result>("usp_VehicleMasterGetByID", companyIDParameter, branchIDParameter, vehicleIDParameter);
        }
    
        public virtual ObjectResult<usp_CustomerListGet_Result> usp_CustomerListGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerListGet_Result>("usp_CustomerListGet");
        }
    
        public virtual ObjectResult<usp_CustomerSiteListGet_Result> usp_CustomerSiteListGet(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerSiteListGet_Result>("usp_CustomerSiteListGet", customerIDParameter);
        }
    
        public virtual ObjectResult<usp_VendorBranchListGet_Result> usp_VendorBranchListGet(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VendorBranchListGet_Result>("usp_VendorBranchListGet", vendorIDParameter);
        }
    
        public virtual ObjectResult<usp_VendorListGet_Result> usp_VendorListGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VendorListGet_Result>("usp_VendorListGet");
        }
    
        public virtual ObjectResult<usp_CustomrSiteListGet_Result> usp_CustomrSiteListGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomrSiteListGet_Result>("usp_CustomrSiteListGet");
        }
    
        public virtual ObjectResult<usp_VendorBranchListDetailsGet_Result> usp_VendorBranchListDetailsGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VendorBranchListDetailsGet_Result>("usp_VendorBranchListDetailsGet");
        }
    
        public virtual ObjectResult<usp_CylinderMasterMobileGet_Result> usp_CylinderMasterMobileGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterMobileGet_Result>("usp_CylinderMasterMobileGet");
        }
    
        public virtual ObjectResult<usp_CylinderMasterMobileGetByID_Result> usp_CylinderMasterMobileGetByID(string cylindeNumber)
        {
            var cylindeNumberParameter = cylindeNumber != null ?
                new ObjectParameter("CylindeNumber", cylindeNumber) :
                new ObjectParameter("CylindeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterMobileGetByID_Result>("usp_CylinderMasterMobileGetByID", cylindeNumberParameter);
        }
    
        public virtual ObjectResult<usp_CylinderMasterGet_Result> usp_CylinderMasterGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterGet_Result>("usp_CylinderMasterGet");
        }
    
        public virtual ObjectResult<usp_CylinderMasterGetbyBarCode_Result> usp_CylinderMasterGetbyBarCode(string barcode)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterGetbyBarCode_Result>("usp_CylinderMasterGetbyBarCode", barcodeParameter);
        }
    
        public virtual ObjectResult<usp_CylinderMasterGetBarcodeImage_Result> usp_CylinderMasterGetBarcodeImage(string cylindeNumber)
        {
            var cylindeNumberParameter = cylindeNumber != null ?
                new ObjectParameter("CylindeNumber", cylindeNumber) :
                new ObjectParameter("CylindeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterGetBarcodeImage_Result>("usp_CylinderMasterGetBarcodeImage", cylindeNumberParameter);
        }
    
        public virtual ObjectResult<usp_CylinderMasterGetByID_Result> usp_CylinderMasterGetByID(string cylindeNumber)
        {
            var cylindeNumberParameter = cylindeNumber != null ?
                new ObjectParameter("CylindeNumber", cylindeNumber) :
                new ObjectParameter("CylindeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterGetByID_Result>("usp_CylinderMasterGetByID", cylindeNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetUserDetails_Result> USP_GetUserDetails(string loginId, string password, string phone)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUserDetails_Result>("USP_GetUserDetails", loginIdParameter, passwordParameter, phoneParameter);
        }
    
        public virtual ObjectResult<string> usp_CylinderMasterInsertUpdate(string cylindeNumber, string barcode, Nullable<int> manufacturer, string purchaseDate, Nullable<int> initialGas, Nullable<int> wLCapacity, Nullable<int> wLCapacityUOMID, Nullable<int> workingPressure, Nullable<int> workingPressureUOMID, string testDate, string nextTestDate, Nullable<int> valveModel, Nullable<int> presentState, Nullable<int> gasInUse, Nullable<int> owner, Nullable<double> size, Nullable<int> sizeUOMID, Nullable<int> currentLocation, Nullable<int> currentCustomerBranchID, Nullable<int> branchid, Nullable<int> companyID, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<bool> status)
        {
            var cylindeNumberParameter = cylindeNumber != null ?
                new ObjectParameter("CylindeNumber", cylindeNumber) :
                new ObjectParameter("CylindeNumber", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var manufacturerParameter = manufacturer.HasValue ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(int));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var initialGasParameter = initialGas.HasValue ?
                new ObjectParameter("InitialGas", initialGas) :
                new ObjectParameter("InitialGas", typeof(int));
    
            var wLCapacityParameter = wLCapacity.HasValue ?
                new ObjectParameter("WLCapacity", wLCapacity) :
                new ObjectParameter("WLCapacity", typeof(int));
    
            var wLCapacityUOMIDParameter = wLCapacityUOMID.HasValue ?
                new ObjectParameter("WLCapacityUOMID", wLCapacityUOMID) :
                new ObjectParameter("WLCapacityUOMID", typeof(int));
    
            var workingPressureParameter = workingPressure.HasValue ?
                new ObjectParameter("WorkingPressure", workingPressure) :
                new ObjectParameter("WorkingPressure", typeof(int));
    
            var workingPressureUOMIDParameter = workingPressureUOMID.HasValue ?
                new ObjectParameter("WorkingPressureUOMID", workingPressureUOMID) :
                new ObjectParameter("WorkingPressureUOMID", typeof(int));
    
            var testDateParameter = testDate != null ?
                new ObjectParameter("TestDate", testDate) :
                new ObjectParameter("TestDate", typeof(string));
    
            var nextTestDateParameter = nextTestDate != null ?
                new ObjectParameter("NextTestDate", nextTestDate) :
                new ObjectParameter("NextTestDate", typeof(string));
    
            var valveModelParameter = valveModel.HasValue ?
                new ObjectParameter("ValveModel", valveModel) :
                new ObjectParameter("ValveModel", typeof(int));
    
            var presentStateParameter = presentState.HasValue ?
                new ObjectParameter("PresentState", presentState) :
                new ObjectParameter("PresentState", typeof(int));
    
            var gasInUseParameter = gasInUse.HasValue ?
                new ObjectParameter("GasInUse", gasInUse) :
                new ObjectParameter("GasInUse", typeof(int));
    
            var ownerParameter = owner.HasValue ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(double));
    
            var sizeUOMIDParameter = sizeUOMID.HasValue ?
                new ObjectParameter("SizeUOMID", sizeUOMID) :
                new ObjectParameter("SizeUOMID", typeof(int));
    
            var currentLocationParameter = currentLocation.HasValue ?
                new ObjectParameter("CurrentLocation", currentLocation) :
                new ObjectParameter("CurrentLocation", typeof(int));
    
            var currentCustomerBranchIDParameter = currentCustomerBranchID.HasValue ?
                new ObjectParameter("CurrentCustomerBranchID", currentCustomerBranchID) :
                new ObjectParameter("CurrentCustomerBranchID", typeof(int));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_CylinderMasterInsertUpdate", cylindeNumberParameter, barcodeParameter, manufacturerParameter, purchaseDateParameter, initialGasParameter, wLCapacityParameter, wLCapacityUOMIDParameter, workingPressureParameter, workingPressureUOMIDParameter, testDateParameter, nextTestDateParameter, valveModelParameter, presentStateParameter, gasInUseParameter, ownerParameter, sizeParameter, sizeUOMIDParameter, currentLocationParameter, currentCustomerBranchIDParameter, branchidParameter, companyIDParameter, createdByParameter, updateByParameter, statusParameter);
        }
    }
}
